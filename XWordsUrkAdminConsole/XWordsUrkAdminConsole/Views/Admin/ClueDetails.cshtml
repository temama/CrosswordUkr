@model XWordsUrkAdminConsole.Models.Clue

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
    <h3 class="modal-title" style="display:inline-block">Clue details</h3>
    @if (Model.Id > 0)
    {
        <label id="clue-details-changed" value="0" style="color:orange; font-weight:100; display:none">[edited]</label>
    }
    else
    {
        <label id="clue-details-changed" value="0" style="color:green; font-weight:100">[new]</label>
    }
    <input id="clue-details-id" type="hidden" value="@Model.Id" />
</div>


    @Html.AntiForgeryToken()

<div class="modal-body">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="row">
        <div class="col-md-1 col-xs-2" style="height:100%">
            <p class="pull-right" style="vertical-align:central"><b>Word:</b></p>
        </div>
        <div class="col-md-4 col-xs-8">
            @if (Model.Word == null)
            {
                //TODO: Add autocomplete
                <input id="clue-details-word" class="form-control input-sm" style="text-transform:uppercase"
                       type="text" value="" required onkeypress="OnClueDetailsWordChanged(event);" />
                <input id="clue-details-wordId" type="hidden" value="-1" />
            }
            else
            {
                <input id="clue-details-word" class="form-control input-sm" style="text-transform:uppercase"
                       type="text" value="@Model.Word.TheWord" required onkeypress="OnClueDetailsWordChanged(event);" disabled />
                <input id="clue-details-wordId" type="hidden" value="@Model.Word.Id" />
            }
        </div>

        <div class="col-md-1 col-xs-2">
            <p class="pull-right" style="vertical-align:central"><b>State:</b></p>
        </div>
        <div class="col-md-2 col-xs-4">
            <button id="clue-details-state-btn" data-toggle="dropdown" class="btn btn-primary btn-sm dropdown-toggle clue-state-@((int)Model.State)"
                    style="width:100%;" value="@((int)Model.State)">
                @Model.State.ToString() <span class="caret" />
            </button>
            <ul id="clue-details-states-list" class="dropdown-menu">
                @foreach (var e in Enum.GetValues(typeof(XWordsUrkAdminConsole.Models.ClueState)))
                {
                    <li id="clue-details-state-@((int)e)" value="@((int)e)" onclick="OnClueDetailsStateItemClick(@((int)e), &quot;@e.ToString()&quot;);"><a href="#">@e.ToString()</a></li>
                }
            </ul>
        </div>

        <div class="col-md-1 col-xs-2">
            <p class="pull-right" style="vertical-align:central"><b>ID:</b></p>
        </div>
        <div class="col-md-1 col-xs-2">
            <label id="clue-details-id" value="@Model.Id">@Model.Id</label>
        </div>
    </div>

    <div class="row">
        <div class="col-md-1 col-xs-2" style="height:100%">
            <p class="pull-right" style="vertical-align:central"><b>Clue:</b></p>
        </div>
        <div class="col-md-7 col-xs-12">
            <input id="clue-details-clue" class="form-control input-sm" style = "width:100%; max-width:100%" type="text" value="@Model.TheClue" required onkeypress="OnClueDetailsChanged();"/>
        </div>

        <div class="col-md-1 col-xs-2">
            <p class="pull-right" style="vertical-align:central"><b>Compl:</b></p>
        </div>
        <div class="col-md-2 col-xs-4">
            <button id="clue-details-complex-btn" data-toggle="dropdown" class="btn btn-primary btn-sm dropdown-toggle word-complex-@((int)Model.Complexity)"
                    style="width:100%;" value="@((int)Model.Complexity)">
                @Model.Complexity.ToString() <span class="caret" />
            </button>
            <ul id="clue-details-complex-list" class="dropdown-menu">
                @foreach (var e in Enum.GetValues(typeof(XWordsUrkAdminConsole.Models.WordComplexity)))
                {
                    <li id="clue-details-complex-@((int)e)" value="@((int)e)" onclick="OnClueDetailsComplexItemClick(@((int)e), &quot;@e.ToString()&quot;);"><a href="#">@e.ToString()</a></li>
                }
            </ul>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 col-xs-12">
            <div class="row">
                <div class="col-md-2 col-xs-4">
                    <p class="pull-right" style="vertical-align:central"><b>Games:</b></p>
                </div>
                <div class="col-md-8 col-xs-12">
                    <ul class="list-group panel panel-default" id="clue-details-gametypes-list" style="max-height: 250px; overflow:auto;">
                        @foreach (XWordsUrkAdminConsole.Models.ClueGameType e in Enum.GetValues(typeof(XWordsUrkAdminConsole.Models.ClueGameType)))
                        {
                            @*<li><label><input type="checkbox" id="clue-details-gametype-@((int)e)" value="@((int)e)"/>@e.ToString()</label></li>*@
                            <li>
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input class="form-check-input" type="checkbox" id="clue-details-gametype-@((int)e)" 
                                        @( Model.GameType.HasFlag(e) ?   "checked='checked'" : string.Empty) value="@((int)e)"
                                        onclick="OnClueDetailsChanged();"/>
                                        @e.ToString()
                                    </label>
                                </div>
                            </li>
                        }
                </ul>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-xs-12">
            <div class="row">
                <div class="col-md-4 col-xs-8">
                    <p class="pull-right" style="vertical-align:central"><b>Modif:</b></p>
                </div>
                <div class="col-md-8 col-xs-12">
                    <input id="clue-details-modified" class="form-control input-sm" style = "width:100%; max-width:100%"
                           value="@(Model.LastModified.ToString("yyyy/MM/dd hh:mm:ss") + " By: " + Model.ModifiedBy.Login)" disabled/>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-xs-8">
                    <p class="pull-right" style="vertical-align:central"><b>Include from Ver:</b></p>
                </div>
                <div class="col-md-8 col-xs-12">
                    <input id="clue-details-includeFrom" class="form-control input-sm" style = "width:100%; max-width:100%"
                           value="" disabled />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-xs-8">
                    <p class="pull-right" style="vertical-align:central"><b>Exclude from Ver:</b></p>
                </div>
                <div class="col-md-8 col-xs-12">
                    <input id="clue-details-excludeFrom" class="form-control input-sm" style = "width:100%; max-width:100%"
                           value="" disabled/>
                </div>
            </div>
        </div>
    </div>

</div>

<div class="modal-footer">
    <button class="btn btn-warning" data-dismiss="modal">Close</button>
    <button id="clue-details-save-btn" type="submit" class="btn btn-success" onclick="OnClueDetailsSaveClick();">Save</button>
</div>


<script type="text/javascript">

    function OnClueDetailsChanged() {
        $("#clue-details-changed").val("1");
        $("#clue-details-changed").show();
    }

    function OnClueDetailsWordChanged(event) {
        var regex = new RegExp("^[а-яА-ЯіІїЇєЄ]+$");
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        if (!regex.test(key)) {
            event.preventDefault();
            return false;
        }
        OnClueDetailsChanged();
    }

    function OnClueDetailsStateItemClick(id, repr) {
        var el = $("#clue-details-state-btn");
        el.html(repr + " <span class=\"caret\" />");
        el.val(id);
        el.attr("class", el.get(0).className.replace(/\bclue-state-\S+/g, "clue-state-" + id));
        OnClueDetailsChanged();
    }

    function OnClueDetailsComplexItemClick(id, repr) {
        var el = $("#clue-details-complex-btn");
        el.html(repr + " <span class=\"caret\" />");
        el.val(id);
        el.attr("class", el.get(0).className.replace(/\bword-complex-\S+/g, "word-complex-" + id));
        OnWordDetailsChanged();
    }

    function ValidateClueBeforeSave(clueData) {
        if (clueData.WordId <= 0)
            return "Word is not selected";

        if (!clueData.TheClue)
            return "Please enter the clue";

        return "";
    }

    function OnClueDetailsSaveClick() {
        var gameTypes = 0;
        var gTypes = document.getElementById("clue-details-gametypes-list").getElementsByTagName("input");
        for (var i = 0; i < gTypes.length; i++) {
            if (gTypes[i].checked)
                gameTypes |= parseInt(gTypes[i].value);
        }

        var clueData = {
            Id: $("#clue-details-id").val(),
            WordId: $("#clue-details-wordId").val(),
            GameType: gameTypes,
            TheClue: $("#clue-details-clue").val(),
            State: $("#clue-details-state-btn").val(),
            Complexity: $("#clue-details-complex-btn").val(),
            IncludedFromVer: $("#clue-details-includeFrom").val(),
            ExcludedFromVer: $("#clue-details-excludeFrom").val()
        };

        var validationMsg = ValidateClueBeforeSave(clueData);
        if (validationMsg != "") {
            alert("Validation error:\n" + validationMsg);
            return false;
        }

        ShowProgress();

        $.ajax({
            data: JSON.stringify(clueData),
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "@Url.Action("SaveClue", "Admin")",
            dataType: "json",
            success: function (sData) {
                if (typeof sData === "string" && sData.startsWith("ERROR: ")) {
                    alert("Save failed:\n" + sData);
                    return false;
                }

                $("#clue-details-changed").val("0");
                $("#clue-details-changed").hide();

                $("#clue-edit-modal").modal("hide");
                HideProgress();

                cluesList.dt.ajax.reload();
            },
            error: function (fData) {
                alert("Save failed:\n" + fData);
                HideProgress();
            }
        });
    }

    $(function () {
        $("#clue-details-word").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "@Url.Action("SearchWord", "Admin")",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.Name, value: item.Name };
                        }))

                    }
                })
            },
            messages: {
                noResults: "", results: ""
            }
        });
    });
</script>
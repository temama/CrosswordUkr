@model IEnumerable<XWordsUrkAdminConsole.Models.Word>

@{
    ViewBag.Title = "Words";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #words-data-table_processing {
        background-color: orange;
        font-weight: 600
    }

    .highlightFilter {
        background-color: lightyellow;
    }

    /*html {
        overflow: -moz-scrollbars-vertical;
        overflow-y: scroll;
    }*/
</style>

<h3 style="display:inline-block">Words</h3>
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-primary list-panel" id="list-panel">
            @*<div class="panel-heading list-panel-heading">
                    <h2 class="panel-title list-panel-title">Words</h2>
                </div>*@
            <div class="panel-body">
                <div id="wordsTableTools">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-1 col-xs-2">
                                <a id="filtersBtn" href="#quickFilters" class="btn btn-default" data-toggle="collapse">Filters</a>
                            </div>
                            <div class="col-md-1 col-xs-2">
                                <button class="btn btn-info btn-md" onclick="OnAddWordClick();">
                                    <span class="glyphicon glyphicon-plus"></span> Add word
                                </button>
                            </div>
                            <div class="col-md-6">

                            </div>
                            <div class="col-md-4">
                                <div class="form-inline">
                                    <div id="wordsTableToolsSearch" class="form-group pull-right"></div>
                                </div>
                            </div>
                        </div>
                        <div id="quickFilters" class="collapse">
                            <div>
                                <div class="col-md-2 col-xs-4 panel panel-default" id="showDeletedCheckPanel" style="margin-top:0px; padding:3px; padding-bottom:5px">
                                    Show deleted
                                    <div class="material-switch pull-right">
                                        <input id="showDeletedCheck" name="showDeletedCheck" type="checkbox" />
                                        <label for="showDeletedCheck" class="label-primary" title="Show deleted records"></label>
                                    </div>
                                </div>
                                <div class="btn-group col-md-2 col-xs-4">
                                    <button id="qfAreasBtn" data-toggle="dropdown" class="btn btn-default btn-sm dropdown-toggle" style="width:100%; height:100%">Areas <span class="caret"></span></button>
                                    <ul id="qfAreasList" class="dropdown-menu noclose">
                                        @foreach (var e in Enum.GetValues(typeof(XWordsUrkAdminConsole.Models.WordArea)))
                                        {
                                            <li><label><input type="checkbox" id="qfArea_@((int)e).ToString()" name="@e.ToString()" value="@((int)e)">@e.ToString()</label></li>
                                        }
                                        <li><a id="qfAreasClear" href="#">Uncheck all</a></li>
                                    </ul>
                                </div>
                                <div class="btn-group col-md-2 col-xs-4">
                                    <button id="qfComplexBtn" data-toggle="dropdown" class="btn btn-default btn-sm dropdown-toggle" style="width:100%; height:100%">Complexity <span class="caret"></span></button>
                                    <ul id="qfComplexList" class="dropdown-menu noclose">
                                        @foreach (var e in Enum.GetValues(typeof(XWordsUrkAdminConsole.Models.WordComplexity)))
                                        {
                                            <li><label><input type="checkbox" id="qfComplex_@((int)e).ToString()" name="@e.ToString()" value="@((int)e)">@e.ToString()</label></li>
                                        }
                                        <li><a id="qfComplexClear" href="#">Uncheck all</a></li>
                                    </ul>
                                </div>
                                <div class="btn-group col-md-2 col-xs-4">
                                    <button id="qfStatesBtn" data-toggle="dropdown" class="btn btn-default btn-sm dropdown-toggle" style="width:100%; height:100%">States <span class="caret"></span></button>
                                    <ul id="qfStatesList" class="dropdown-menu noclose">
                                        @foreach (var e in Enum.GetValues(typeof(XWordsUrkAdminConsole.Models.WordState)))
                                        {
                                            <li><label><input type="checkbox" id="qfStates_@((int)e).ToString()" name="@e.ToString()" value="@((int)e)">@e.ToString()</label></li>
                                        }
                                        <li><a id="qfStatesClear" href="#">Uncheck all</a></li>
                                    </ul>
                                </div>
                                <div class="btn-group col-md-2 col-xs-4">
                                    <button id="qfModifiedByBtn" data-toggle="dropdown" class="btn btn-default btn-sm dropdown-toggle" style="width:100%; height:100%">ModifiedBy <span class="caret"></span></button>
                                    <ul id="qfModifiedByList" class="dropdown-menu noclose">
                                        @foreach (var u in XWordsUrkAdminConsole.Accounting.AuthModule.GetAllUsers())
                                        {
                                            <li>
                                                <label><input type="checkbox" id="qfModifiedBy_@u.Id"
                                                           name="@u.Login" value="@u.Id">@u.Login
                                                    </label>
                                                    <span class="avatar-sm" style="background-color:@XWordsUrkAdminConsole.Accounting.AuthModule.GetAvatarColor(u.Initials)">@u.Initials</span>
                                                </li>
                                        }
                                        <li><a id="qfModifiedByClear" href="#">Uncheck all</a></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <table id="words-data-table" class="table table-bordered table-hover table-striped"
                               style="width:100%;"></table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="word-edit-modal" class="modal fade in hidden-print" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg">
        <div id="word-edit-container" class="modal-content">
        </div>
    </div>
</div>

<div id="clue-edit-modal" class="modal fade in hidden-print modal-dialog-clue" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg">
        <div id="clue-edit-container" class="modal-content">
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
        var wordListVM;
        var wordListVMInited = false;

        var wordAreas = [];
        var wordComplexities = [];
        var wordStates = [];
        var clueStates = [];

        var handleFilterChange = true;

        var cluesList;

        function ShowProgress() {
            $("#global-progress-bar").show();
        }

        function HideProgress() {
            $("#global-progress-bar").hide();
        }

        function OnAddWordClick() {
            var url = "@Url.Action("WordDetails","Admin")" + "/";
            var data = { Id: -1};
            $.get(url, function (htmlData) {
                $("#word-edit-container").html(htmlData);
                InitWordDetails(data);
                ShowModalWithScrolling("#word-edit-modal");
            });
        }

        function DecorateFilters() {
            var fSet = false;

            if ($("#showDeletedCheck").prop("checked")) {
                fSet = true;
                $("#showDeletedCheckPanel").addClass("highlightFilter");
            }
            else
            {
                $("#showDeletedCheckPanel").removeClass("highlightFilter");
            }

            // Areas
            var fAreas = document.getElementById("qfAreasList").getElementsByTagName("input");
            var fAreasSelected = false;
            for (var i = 0; i < fAreas.length; i++) {
                if (fAreas[i].checked)
                {
                    fAreasSelected = true;
                    fSet = true;
                }
            }

            if (fAreasSelected) {
                fSet = true;
                $("#qfAreasBtn").addClass("highlightFilter");
            }
            else {
                $("#qfAreasBtn").removeClass("highlightFilter");
            }

            // Complexity
            var fComplex = document.getElementById("qfComplexList").getElementsByTagName("input");
            var fComplexSelected = false;
            for (var i = 0; i < fComplex.length; i++) {
                if (fComplex[i].checked) {
                    fComplexSelected = true;
                    fSet = true;
                }
            }

            if (fComplexSelected) {
                fSet = true;
                $("#qfComplexBtn").addClass("highlightFilter");
            }
            else {
                $("#qfComplexBtn").removeClass("highlightFilter");
            }

            // States
            var fStates = document.getElementById("qfStatesList").getElementsByTagName("input");
            var fStatesSelected = false;
            for (var i = 0; i < fComplex.length; i++) {
                if (fStates[i].checked) {
                    fStatesSelected = true;
                    fSet = true;
                }
            }

            if (fStatesSelected) {
                fSet = true;
                $("#qfStatesBtn").addClass("highlightFilter");
            }
            else {
                $("#qfStatesBtn").removeClass("highlightFilter");
            }

            // ModifiedBy
            var fModifiedBy = document.getElementById("qfModifiedByList").getElementsByTagName("input");
            var fModifiedBySelected = false;
            for (var i = 0; i < fModifiedBy.length; i++) {
                if (fModifiedBy[i].checked) {
                    fModifiedBySelected = true;
                    fSet = true;
                }
            }

            if (fModifiedBySelected) {
                fSet = true;
                $("#qfModifiedByBtn").addClass("highlightFilter");
            }
            else {
                $("#qfModifiedByBtn").removeClass("highlightFilter");
            }


            // If at least one filter set
            if (fSet) {
                $("#filtersBtn").removeClass("btn-default");
                $("#filtersBtn").addClass("btn-warning");
            } else {
                $("#filtersBtn").removeClass("btn-warning");
                $("#filtersBtn").addClass("btn-default");
            }
        };

        function OnFilterUpdate() {
            DecorateFilters();
            wordListVM.dt.ajax.reload();
        };

        function InitWordDetails(word) {
            if (word.Id > 0)
                $("#wordDetaisHasChanges").hide();

            cluesList = {
                dt: null,

                init: function () {
                    this.dt = $('#clues-data-table').on('processing.dt', function (e, settings, processing) {
                        if (processing)
                            ShowProgress();
                        else
                            HideProgress();
                    }).DataTable({
                        "serverSide": true,
                        "processing": true,
                        "searching": true,
                        "ajax": {
                            "url": "@Url.Action("GetClues","Admin")",
                            "data": function (d) {
                                d.WordId = word.Id;
                                d.ShowRejected = 0;
                                if ($("#word-detail-showRejectedClues-check"))
                                    d.ShowRejected = $("#word-detail-showRejectedClues-check").prop("checked");
                            },
                            "dataSrc": function (json) {
                                if (json.IsRedirect) {
                                    alert(json.Message);
                                    window.location.href = json.RedirectUrl;
                                    return "";
                                }
                                return json.data;
                            }
                        },
                        "columns": [
                            {
                                "title": "Id",
                                "data": "Id",
                                "searchable": false
                            },
                            {
                                "title": "Clue",
                                "data": "TheClue",
                                "searchable": false
                            },
                            {
                                "title": "Compl",
                                "data": "Complexity",
                                "searchable": true,
                                "render": function (data) {
                                    return wordComplexities[data];
                                }
                            },
                            {
                                "title": "In",
                                "data": "IncludedFromVer",
                                "searchable": false
                            },
                            {
                                "title": "Ex",
                                "data": "ExcludedFromVer",
                                "searchable": true
                            },
                            {
                                "title": "State",
                                "data": "State",
                                "searchable": true,
                                "render": function (data) {
                                    return "<div class=\"panel panel-default clue-state-" + data + "\" style=\"text-align:center\">" + clueStates[data] + "</div>";
                                }
                            },
                            {
                                "title": "Modified",
                                "data": "LastModified",
                                "searchable": false,
                                "type": "date",
                                "render": function (data) {
                                    return moment(data).format("YYYY/MM/DD HH:mm:ss")
                                }
                            },
                            {
                                "title": "By",
                                "data": "ModifiedBy",
                                "searchable": true,
                                "render": function (data) {
                                    return "<span class=\"avatar-sm\" style=\"background-color:" +
                                        GetAvatarColor(data) + "\">" + data + "</span>";
                                }
                            }
                        ],
                        //"lengthMenu": [[10, 25, 50, 100], [10, 25, 50, 100]],
                        //"dom": "frtip"
                        "dom": "<'row'<'col-sm-12'frt>><'row'<'col-sm-5'i><'col-sm-7'p>>",
                    });
                }
            }

            cluesList.init();

            $("#clues-data-table_filter").appendTo("#cluesTableToolsSearch");

            $('#clues-data-table tbody').on('dblclick', 'tr', function () {
                var data = cluesList.dt.row(this).data(); // use data.Id further
                var url = "@Url.Action("ClueDetails","Admin")" + "/" + data.Id;
                ShowProgress();
                $.get(url, function (htmlData) {
                    $("#clue-edit-container").html(htmlData);
                    ShowModalWithScrolling("#clue-edit-modal");
                    HideProgress();
                });
            });
        }

        function OnWordDetailsChanged() {
            $("#wordDetaisHasChanges").val("1");
            $("#wordDetaisHasChanges").show();
        }

        function OnWordDetailsWordChanged(event) {
            var regex = new RegExp("^[а-яА-ЯіІїЇєЄ]+$");
            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
            if (!regex.test(key)) {
                event.preventDefault();
                return false;
            }
            OnWordDetailsChanged();
        }

        function OnWordDetailsStateItemClick(id, repr) {
            var el = $("#word-details-state-btn");
            el.html(repr + " <span class=\"caret\" />");
            el.val(id);
            el.attr("class", el.get(0).className.replace(/\bword-state-\S+/g, "word-state-" + id));
            OnWordDetailsChanged();
        }

        function OnWordDetailsAreaItemClick(id, repr) {
            var el = $("#word-details-area-btn");
            el.html(repr + " <span class=\"caret\" />");
            el.val(id);
            OnWordDetailsChanged();
        }

        function OnWordDetailsComplexItemClick(id, repr) {
            var el = $("#word-details-complex-btn");
            el.html(repr + " <span class=\"caret\" />");
            el.val(id);
            el.attr("class", el.get(0).className.replace(/\bword-complex-\S+/g, "word-complex-" + id));
            OnWordDetailsChanged();
        }

        function OnWordDefinitionInput() {
            $("#wordDefView").html($("#wordDefEdit").val());
            OnWordDetailsChanged();
        }

        function OnWordDetailsSaveClick() {
            SaveWordDetails(/*$("#word-details-id").text() <= 0*/ true, false);
        }

        function OnWordDetailsSaveExitClick() {
            SaveWordDetails(false, true);
        }

        function SaveWordDetails(reload, close) {
            if ($("#wordDetaisHasChanges").val() == "0") {
                if (close) {
                    $("#word-edit-modal").modal("hide");
                }
                return false;
            }

            var wordData = {
                Id: $("#word-details-id").text(),
                TheWord: $("#word-details-word").val(),
                Definition: $("#wordDefEdit").val(),
                Area: $("#word-details-area-btn").val(),
                Complexity: $("#word-details-complex-btn").val(),
                State: $("#word-details-state-btn").val()
            };

            ShowProgress();

            $.ajax({
                data: JSON.stringify(wordData),
                type: "POST",
                contentType: "application/json; charset=utf-8",
                url: "@Url.Action("SaveWord", "Admin")",
                dataType: "json",
                success: function (sData) {
                    if (typeof sData === "string" && sData.startsWith("ERROR: "))
                    {
                        alert("Save failed:\n" + sData);
                        return false;
                    }

                    $("#wordDetaisHasChanges").val("0");
                    $("#wordDetaisHasChanges").hide();

                    if (reload) {
                        var url = "@Url.Action("WordDetails","Admin")" + "/" + sData.Id;
                        $.get(url, function (htmlData) {
                            $("#word-edit-container").html(htmlData);
                            InitWordDetails(sData);
                        });
                    }

                    if (close)
                    {
                        $("#word-edit-modal").modal("hide");
                    }

                    wordListVM.dt.ajax.reload();
                    HideProgress();
                },
                error: function (fData) {
                    alert("Save failed:\n" + fData);
                    HideProgress();
                }
            });

        }

        $(function () {

            $.getJSON("@Url.Action("GetWordAreas", "Admin")", function (resp) {
                wordAreas = resp;
            })

            $.getJSON("@Url.Action("GetWordComplexities", "Admin")", function (resp) {
                wordComplexities = resp;
            })

            $.getJSON("@Url.Action("GetWordStates", "Admin")", function (resp) {
                wordStates = resp;
            })

            $.getJSON("@Url.Action("GetClueStates", "Admin")", function (resp) {
                clueStates = resp;
            })

            wordListVM = {
                dt: null,

                init: function () {
                    this.dt = $('#words-data-table').on('processing.dt', function (e, settings, processing) {
                        if (processing)
                            ShowProgress();
                        else
                            HideProgress();
                    }).DataTable({
                        "serverSide": true,
                        "stateSave": true,
                        "processing": true,
                        "searching": true,
                        //"scrollY": "60vh",
                        "ajax": {
                            "url": "@Url.Action("GetWords","Admin")",
                            "data": function (d) {
                                d.ShowDeleted = $("#showDeletedCheck").prop("checked");
                                d.AreasFilter = "";
                                var areas = document.getElementById("qfAreasList").getElementsByTagName("input");
                                for (var i = 0; i < areas.length; i++) {
                                    if (areas[i].checked)
                                        d.AreasFilter = d.AreasFilter + areas[i].value + ",";
                                }
                                d.ComplexityFilter = "";
                                var compls = document.getElementById("qfComplexList").getElementsByTagName("input");
                                for (var i = 0; i < compls.length; i++) {
                                    if (compls[i].checked)
                                        d.ComplexityFilter = d.ComplexityFilter + compls[i].value + ",";
                                }
                                d.StatesFilter = "";
                                var states = document.getElementById("qfStatesList").getElementsByTagName("input");
                                for (var i = 0; i < states.length; i++) {
                                    if (states[i].checked)
                                        d.StatesFilter = d.StatesFilter + states[i].value + ",";
                                }
                                d.ModifiedByFilter = "";
                                var modifiedBy = document.getElementById("qfModifiedByList").getElementsByTagName("input");
                                for (var i = 0; i < modifiedBy.length; i++) {
                                    if (modifiedBy[i].checked)
                                        d.ModifiedByFilter = d.ModifiedByFilter + modifiedBy[i].value + ",";
                                }
                                d.ModifiedFrom = "";
                                d.ModifiedTo = "";
                            },
                            "dataSrc": function (json) {
                                if (json.IsRedirect) {
                                    alert(json.Message);
                                    window.location.href = json.RedirectUrl;
                                    return "";
                                }
                                return json.data;
                            }
                        },
                        "columns": [
                            {
                                "title": "Id",
                                "data": "Id",
                                "searchable": false
                            },
                            {
                                "title": "Word",
                                "data": "TheWord",
                                "searchable": true
                            },
                            {
                                "title": "Definition",
                                "data": "Definition",
                                "searchable": true
                            },
                            {
                                "title": "Area",
                                "data": "Area",
                                "searchable": true,
                                "render": function (data) {
                                    return wordAreas[data];
                                }
                            },
                            {
                                "title": "Compl",
                                "data": "Complexity",
                                "searchable": true,
                                "render": function (data) {
                                    return wordComplexities[data];
                                }
                            },
                            {
                                "title": "State",
                                "data": "State",
                                "searchable": true,
                                "render": function (data) {
                                    return "<div class=\"panel panel-default word-state-" + data + "\" style=\"text-align:center\">" + wordStates[data] + "</div>";
                                }
                            },
                            {
                                "title": "Modified",
                                "data": "LastModified",
                                "searchable": false,
                                "type": "date",
                                "render": function (data) {
                                    return moment(data).format("YYYY/MM/DD HH:mm:ss")
                                }
                            },
                            {
                                "title": "By",
                                "data": "ModifiedBy",
                                "searchable": true,
                                "render": function (data) {
                                    return "<span class=\"avatar-sm\" style=\"background-color:" +
                                        GetAvatarColor(data) + "\">" + data + "</span>";
                                }
                            }
                        ],
                        "searchDelay": 500,
                        "lengthMenu": [[10, 25, 50, 100], [10, 25, 50, 100]],
                        //"dom": "Bfrtilp",
                        "dom": "ftilp"
                    });
                }
            }

            // initialize the datatables
            wordListVM.init();

            $("#words-data-table_filter").appendTo("#wordsTableToolsSearch");

            $("#showDeletedCheck").change(function () {
                OnFilterUpdate();
            });

            $("#qfAreasClear").click(function () {
                handleFilterChange = false;
                var opts = document.getElementById("qfAreasList").getElementsByTagName("input");
                for (var i = 0; i < opts.length; i++) {
                    opts[i].checked = false;
                }
                handleFilterChange = true;
                OnFilterUpdate();
            });

            $("#qfComplexClear").click(function () {
                handleFilterChange = false;
                var opts = document.getElementById("qfComplexList").getElementsByTagName("input");
                for (var i = 0; i < opts.length; i++) {
                    opts[i].checked = false;
                }
                handleFilterChange = true;
                OnFilterUpdate();
            });

            $("#qfStatesClear").click(function () {
                handleFilterChange = false;
                var opts = document.getElementById("qfStatesList").getElementsByTagName("input");
                for (var i = 0; i < opts.length; i++) {
                    opts[i].checked = false;
                }
                handleFilterChange = true;
                OnFilterUpdate();
            });

            $("#qfModifiedByClear").click(function () {
                handleFilterChange = false;
                var opts = document.getElementById("qfModifiedByList").getElementsByTagName("input");
                for (var i = 0; i < opts.length; i++) {
                    opts[i].checked = false;
                }
                handleFilterChange = true;
                OnFilterUpdate();
            });

            $("input[id^='qfArea_']").change(function () {
                if (handleFilterChange)
                    OnFilterUpdate();
            });

            $("input[id^='qfComplex_']").change(function () {
                if (handleFilterChange)
                    OnFilterUpdate();
            });

            $("input[id^='qfStates_']").change(function () {
                if (handleFilterChange)
                    OnFilterUpdate();
            });

            $("input[id^='qfModifiedBy_']").change(function () {
                if (handleFilterChange)
                    OnFilterUpdate();
            });

            $('#words-data-table tbody').on('dblclick', 'tr', function () {
                var data = wordListVM.dt.row(this).data(); // use data.Id further
                var url = "@Url.Action("WordDetails","Admin")" + "/" + data.Id;
                ShowProgress();
                $.get(url, function (htmlData) {
                    $("#word-edit-container").html(htmlData);
                    InitWordDetails(data);
                    ShowModalWithScrolling("#word-edit-modal");
                    HideProgress();
                });
            });

            $("#word-edit-modal").on("hide.bs.modal", function (e) {
                if ($("#wordDetaisHasChanges").val() == "1") {
                    if (!confirm("Changes are not saved.\nAre you sure you want to close dialog?")) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        return false;
                    }
                }
            });

            $("#clue-edit-modal").on("hide.bs.modal", function (e) {
                $("#word-edit-modal").addClass("modal-open");
            });
        });

    </script>
}
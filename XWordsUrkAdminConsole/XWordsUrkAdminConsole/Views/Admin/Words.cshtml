@model IEnumerable<XWordsUrkAdminConsole.Models.Word>

@{
    ViewBag.Title = "Words";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #words-data-table_processing {
        background-color: orange;
        font-weight: 600
    }

    .highlightFilter {
        background-color: lightyellow;
    }

    /*.dataTables_processing {
        fill: orange
    }*/
</style>

<h3>Words</h3>
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-primary list-panel" id="list-panel">
            @*<div class="panel-heading list-panel-heading">
                    <h2 class="panel-title list-panel-title">Words</h2>
                </div>*@
            <div class="panel-body">
                <div id="wordsTableTools">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-8 col-xs-12">
                                <a id="filtersBtn" href="#quickFilters" class="btn btn-default" data-toggle="collapse">Filters</a>
                            </div>
                            <div class="col-md-4">
                                <div class="form-inline">
                                    <div id="wordsTableToolsSearch" class="form-group pull-right"></div>
                                </div>
                            </div>
                        </div>
                        <div id="quickFilters" class="collapse">
                            <div>
                                <div class="col-md-2 col-xs-4 panel panel-default" id="showDeletedCheckPanel" style="margin-top:0px; padding:3px; padding-bottom:5px">
                                    Show deleted
                                    <div class="material-switch pull-right">
                                        <input id="showDeletedCheck" name="showDeletedCheck" type="checkbox" />
                                        <label for="showDeletedCheck" class="label-primary" title="Show deleted records"></label>
                                    </div>
                                </div>
                                <div class="btn-group col-md-2 col-xs-4">
                                    <button id="qfAreasBtn" data-toggle="dropdown" class="btn btn-default btn-sm dropdown-toggle" style="width:100%; height:100%">Areas <span class="caret"></span></button>
                                    <ul id="qfAreasList" class="dropdown-menu noclose">
                                        @foreach (var e in Enum.GetValues(typeof(XWordsUrkAdminConsole.Models.WordArea)))
                                        {
                                            <li><label><input type="checkbox" id="qfArea_@((int)e).ToString()" name="@e.ToString()" value="@((int)e)">@e.ToString()</label></li>
                                        }
                                        <li><a id="qfAreasClear" href="#">Uncheck all</a></li>
                                    </ul>
                                </div>
                                <div class="btn-group col-md-2 col-xs-4">
                                    <button id="qfComplexBtn" data-toggle="dropdown" class="btn btn-default btn-sm dropdown-toggle" style="width:100%; height:100%">Complexity <span class="caret"></span></button>
                                    <ul id="qfComplexList" class="dropdown-menu noclose">
                                        @foreach (var e in Enum.GetValues(typeof(XWordsUrkAdminConsole.Models.WordComplexity)))
                                        {
                                            <li><label><input type="checkbox" id="qfComplex_@((int)e).ToString()" name="@e.ToString()" value="@((int)e)">@e.ToString()</label></li>
                                        }
                                        <li><a id="qfComplexClear" href="#">Uncheck all</a></li>
                                    </ul>
                                </div>
                                <div class="btn-group col-md-2 col-xs-4">
                                    <button id="qfStatesBtn" data-toggle="dropdown" class="btn btn-default btn-sm dropdown-toggle" style="width:100%; height:100%">States <span class="caret"></span></button>
                                    <ul id="qfStatesList" class="dropdown-menu noclose">
                                        @foreach (var e in Enum.GetValues(typeof(XWordsUrkAdminConsole.Models.WordState)))
                                        {
                                            <li><label><input type="checkbox" id="qfStates_@((int)e).ToString()" name="@e.ToString()" value="@((int)e)">@e.ToString()</label></li>
                                        }
                                        <li><a id="qfStatesClear" href="#">Uncheck all</a></li>
                                    </ul>
                                </div>
                                <!--div class="btn-group col-md-4 col-xs-8 panel panel-default" style="margin-top:0px; padding:3px; padding-bottom:5px">
                                    Modified 
                                    <div class="material-switch pull-right">
                                        <input id="qfModifiedOn" name="qfModifiedOn" type="checkbox" />
                                        <label for="qfModifiedOn" class="label-primary" title="Turn on/off filter by Last modified date"></label>
                                    </div>
                                    <input class="pull-right" type="datetime"/>
                                </div-->
                            </div>
                        </div>
                        <table id="words-data-table" class="table table-bordered table-hover table-striped"
                               style="width:100%;"></table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="word-edit-modal" class="modal fade in hidden-print" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg">
        <div id="word-edit-container" class="modal-content">
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
        var wordListVM;
        var wordListVMInited = false;

        var wordAreas = [];
        var wordComplexities = [];
        var wordStates = [];

        var handleFilterChange = true;

        var cluesList;

        function DecorateFilters() {
            var fSet = false;

            if ($("#showDeletedCheck").prop("checked")) {
                fSet = true;
                $("#showDeletedCheckPanel").addClass("highlightFilter");
            }
            else
            {
                $("#showDeletedCheckPanel").removeClass("highlightFilter");
            }

            // Areas
            var fAreas = document.getElementById("qfAreasList").getElementsByTagName("input");
            var fAreasSelected = false;
            for (var i = 0; i < fAreas.length; i++) {
                if (fAreas[i].checked)
                {
                    fAreasSelected = true;
                    fSet = true;
                }
            }

            if (fAreasSelected) {
                fSet = true;
                $("#qfAreasBtn").addClass("highlightFilter");
            }
            else {
                $("#qfAreasBtn").removeClass("highlightFilter");
            }

            // Complexity
            var fComplex = document.getElementById("qfComplexList").getElementsByTagName("input");
            var fComplexSelected = false;
            for (var i = 0; i < fComplex.length; i++) {
                if (fComplex[i].checked) {
                    fComplexSelected = true;
                    fSet = true;
                }
            }

            if (fComplexSelected) {
                fSet = true;
                $("#qfComplexBtn").addClass("highlightFilter");
            }
            else {
                $("#qfComplexBtn").removeClass("highlightFilter");
            }

            // States
            var fStates = document.getElementById("qfStatesList").getElementsByTagName("input");
            var fStatesSelected = false;
            for (var i = 0; i < fComplex.length; i++) {
                if (fStates[i].checked) {
                    fStatesSelected = true;
                    fSet = true;
                }
            }

            if (fStatesSelected) {
                fSet = true;
                $("#qfStatesBtn").addClass("highlightFilter");
            }
            else {
                $("#qfStatesBtn").removeClass("highlightFilter");
            }


            // If at least one filter set
            if (fSet) {
                $("#filtersBtn").removeClass("btn-default");
                $("#filtersBtn").addClass("btn-warning");
            } else {
                $("#filtersBtn").removeClass("btn-warning");
                $("#filtersBtn").addClass("btn-default");
            }
        };

        function OnFilterUpdate() {
            DecorateFilters();
            wordListVM.dt.ajax.reload();
        };

        function InitWordDetails() {
            cluesList = {
                dt: null,

                init: function () {
                    this.dt = $('#clues-data-table').DataTable({
                        "serverSide": true,
                        "processing": true,
                        "searching": true,
                        "ajax": {
                            "url": "@Url.Action("GetWords","Admin")"
                        },
                        "columns": [
                            {
                                "title": "Id",
                                "data": "Id",
                                "searchable": false
                            },
                            {
                                "title": "Word",
                                "data": "TheWord",
                                "searchable": true
                            }
                        ],
                        "lengthMenu": [[10, 25, 50, 100], [10, 25, 50, 100]],
                    });
                }
            }

            cluesList.init();
        }

        $(function () {

            $.getJSON("@Url.Action("GetWordAreas", "Admin")", function (resp) {
                wordAreas = resp;
            })

            $.getJSON("@Url.Action("GetWordComplexities", "Admin")", function (resp) {
                wordComplexities = resp;
            })

            $.getJSON("@Url.Action("GetWordStates", "Admin")", function (resp) {
                wordStates = resp;
            })

            wordListVM = {
                dt: null,

                init: function () {
                    this.dt = $('#words-data-table').DataTable({
                        "serverSide": true,
                        "stateSave": true,
                        "processing": true,
                        "searching": true,
                        //"scrollY": "60vh",
                        "ajax": {
                            "url": "@Url.Action("GetWords","Admin")",
                            "data": function (d) {
                                d.ShowDeleted = $("#showDeletedCheck").prop("checked");
                                d.AreasFilter = "";
                                var areas = document.getElementById("qfAreasList").getElementsByTagName("input");
                                for (var i = 0; i < areas.length; i++) {
                                    if (areas[i].checked)
                                        d.AreasFilter = d.AreasFilter + areas[i].value + ",";
                                }
                                d.ComplexityFilter = "";
                                var compls = document.getElementById("qfComplexList").getElementsByTagName("input");
                                for (var i = 0; i < compls.length; i++) {
                                    if (compls[i].checked)
                                        d.ComplexityFilter = d.ComplexityFilter + compls[i].value + ",";
                                }
                                d.StatesFilter = "";
                                var states = document.getElementById("qfStatesList").getElementsByTagName("input");
                                for (var i = 0; i < states.length; i++) {
                                    if (states[i].checked)
                                        d.StatesFilter = d.StatesFilter + states[i].value + ",";
                                }
                                d.ModifiedFrom = "";
                                d.ModifiedTo = "";
                            }
                        },
                        "columns": [
                            {
                                "title": "Id",
                                "data": "Id",
                                "searchable": false
                            },
                            {
                                "title": "Word",
                                "data": "TheWord",
                                "searchable": true
                            },
                            {
                                "title": "Definition",
                                "data": "Definition",
                                "searchable": true
                            },
                            {
                                "title": "Area",
                                "data": "Area",
                                "searchable": true,
                                "render": function (data) {
                                    return wordAreas[data];
                                }
                            },
                            {
                                "title": "Complexity",
                                "data": "Complexity",
                                "searchable": true,
                                "render": function (data) {
                                    return wordComplexities[data];
                                }
                            },
                            {
                                "title": "State",
                                "data": "State",
                                "searchable": true,
                                "render": function (data) {
                                    return wordStates[data];
                                }
                            },
                            {
                                "title": "Modified",
                                "data": "LastModified",
                                "searchable": false,
                                "type": "date",
                                "render": function (data) {
                                    return moment(data).format("YYYY/MM/DD HH:mm:ss")
                                }
                            }
                        ],
                        "searchDelay": 500,
                        "lengthMenu": [[10, 25, 50, 100], [10, 25, 50, 100]],
                        //"dom": "Bfrtilp",
                        "dom": "frtilp"
                    });
                }
            }

            // initialize the datatables
            wordListVM.init();

            $("#words-data-table_filter").appendTo("#wordsTableToolsSearch");

            $("#showDeletedCheck").change(function () {
                OnFilterUpdate();
            });

            $("#qfAreasClear").click(function () {
                handleFilterChange = false;
                var opts = document.getElementById("qfAreasList").getElementsByTagName("input");
                for (var i = 0; i < opts.length; i++) {
                    opts[i].checked = false;
                }
                handleFilterChange = true;
                OnFilterUpdate();
            });

            $("#qfComplexClear").click(function () {
                handleFilterChange = false;
                var opts = document.getElementById("qfComplexList").getElementsByTagName("input");
                for (var i = 0; i < opts.length; i++) {
                    opts[i].checked = false;
                }
                handleFilterChange = true;
                OnFilterUpdate();
            });

            $("#qfStatesClear").click(function () {
                handleFilterChange = false;
                var opts = document.getElementById("qfStatesList").getElementsByTagName("input");
                for (var i = 0; i < opts.length; i++) {
                    opts[i].checked = false;
                }
                handleFilterChange = true;
                OnFilterUpdate();
            });

            $("input[id^='qfArea_']").change(function () {
                if (handleFilterChange)
                    OnFilterUpdate();
            });

            $("input[id^='qfComplex_']").change(function () {
                if (handleFilterChange)
                    OnFilterUpdate();
            });

            $("input[id^='qfStates_']").change(function () {
                if (handleFilterChange)
                    OnFilterUpdate();
            });

            $('#words-data-table tbody').on('dblclick', 'tr', function () {
                var data = wordListVM.dt.row(this).data(); // use data.Id further
                var url = "@Url.Action("WordDetails","Admin")" + "/" + data.Id;
                $.get(url, function (data) {
                    $("#word-edit-container").html(data);
                    InitWordDetails();
                    $("#word-edit-modal").modal("show");
                })
            });
        });

    </script>
}
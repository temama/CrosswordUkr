@model XWordsUrkAdminConsole.Models.User

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
    <h3 class="modal-title" style="display:inline-block">User settings</h3>
    <input id="user-details-is-user-admin" type="hidden" value="@(Model.HasRole(XWordsUrkAdminConsole.Accounting.UserRoles.UsersAdmin.ToString()) ? 1 : 0)" />
    <input id="user-details-id" type="hidden" value="@Model.Id" />
</div>


    @Html.AntiForgeryToken()

    <div class="modal-body">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id@*, new { htmlAttributes = new { id = "user-details-id" } }*@)



    <div class="row">

        <div class="col-md-2 col-xs-4" style="height:100%">
            @Html.LabelFor(model => model.Login, htmlAttributes: new { @class = "control-label pull-right" })
        </div>
        <div class="col-md-5 col-xs-10">
            @Html.EditorFor(model => model.Login, new { htmlAttributes = new { @class = "form-control", id = "user-details-login" } })
        </div>


        <div class="col-md-1 col-xs-2" style="height:100%">
        </div>
        <div class="col-md-2 col-xs-4" style="height:100%">
            @Html.LabelFor(model => model.Initials, htmlAttributes: new { @class = "control-label pull-right" })
        </div>
        <div class="col-md-2 col-xs-4">
            @Html.EditorFor(model => model.Initials, new { htmlAttributes = new { @class = "form-control", onchange = "OnInitialsChange()", id = "user-details-initials"} })
        </div>
    </div>

    <div class="row marg-top-s">
        <div class="col-md-2 col-xs-4" style="height:100%">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label pull-right" })
        </div>
        <div class="col-md-5 col-xs-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", type = "email", placeholder = "example@example.com", id = "user-details-email" } })
        </div>


        <div class="col-md-3 col-xs-6" style="height:100%">
            @Html.LabelFor(model => model.Valid, htmlAttributes: new { @class = "control-label pull-right" })
        </div>
        <div class="col-md-2 col-xs-4">
            @Html.EditorFor(model => model.Valid, new { htmlAttributes = new { disabled = "disabled", id = "user-details-valid" } })
        </div>
    </div>

    <div class="row marg-top-s">
        <div class="col-md-2 col-xs-4" style="height:100%">
            @Html.LabelFor(model => model.Roles, htmlAttributes: new { @class = "control-label pull-right" })
        </div>
        <div class="col-md-8 col-xs-12">
            @Html.EditorFor(model => model.Roles, new { htmlAttributes = new { @class = "form-control", style = "width:100%; max-width:100%", disabled = "disabled", id = "user-details-roles" } })
        </div>
        <div class="col-md-2 col-xs-4" style="height:100%">
            <button class="btn btn-primary disabled">Settings</button>
        </div>
    </div>

    <hr />

    <h4>Update password</h4>

    <div class="row marg-top-s">
        <div class="col-md-2 col-xs-4" style="height:100%">
            <label class="control-label pull-right">Old</label>
        </div>
        <div class="col-md-8 col-xs-12">
            <input class="form-control text-box single-line" id="user-details-old-password" type="password" value="">
        </div>
    </div>

    <div class="row marg-top-s">
        <div class="col-md-2 col-xs-4" style="height:100%">
            <label class="control-label pull-right">New</label>
        </div>
        <div class="col-md-8 col-xs-12">
            <input class="form-control text-box single-line" id="user-details-new-password" type="password" value="">
        </div>
    </div>

    <div class="row marg-top-s">
        <div class="col-md-2 col-xs-4" style="height:100%">
            <label class="control-label pull-right">Confirm</label>
        </div>
        <div class="col-md-8 col-xs-12">
            <input class="form-control text-box single-line" id="user-details-confirm-password" type="password" value="">
        </div>
    </div>

    <div class="row marg-top-s">
        <div class="col-md-2"></div>

        <div class="col-md-4">
            <button class="btn btn-primary" onclick="OnUpdatePasswordClick();">Update password</button>
        </div>

        <div class="col-md-6">
            <label id="user-details-change-pass-error" class="text-danger" style="display:inline-block"></label>
            <label id="user-details-change-pass-success" class="text-success" style="display:inline-block"></label>
        </div>
    </div>
</div>

<div class="modal-footer">
    <button class="btn btn-warning" data-dismiss="modal">Close</button>
    <button id="user-details-save-btn" type="submit" class="btn btn-success" onclick="OnUserDetailsSaveClick();">Save</button>
</div>

@Scripts.Render("~/scripts/app/CommonActions.js")

<script type="text/javascript">
    function OnInitialsChange() {
        $("#user-details-initials").css("background-color", GetAvatarColor($("#user-details-initials").val()));
        $("#user-details-initials").css("color", "#fff");
        return false;
    }

    function OnUpdatePasswordClick() {
        $("#user-details-change-pass-error").text("");
        $("#user-details-change-pass-success").text("");

        if ($("#user-details-new-password").val() != $("#user-details-confirm-password").val()) {
            $("#user-details-change-pass-error").text("Password doesn't match confirmation");
            return false;
        }

        ShowProgress();

        var sendData = {
            oldPassword: $("#user-details-old-password").val(),
            newPassword: $("#user-details-new-password").val()
        };

        $.ajax({
            data: JSON.stringify(sendData),
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "@Url.Action("UpdatePassword", "Home")",
            dataType: "json",
            success: function (sData) {
                if (sData.startsWith("Error:")) {
                    $("#user-details-change-pass-error").text(sData);
                } else {
                    $("#user-details-change-pass-success").text(sData);
                }
                HideProgress();
            },
            error: function (fData) {
                alert("Operation failed:\n" + fData);
                HideProgress();
            }
        });
    }

    function OnUserDetailsSaveClick() {
         ShowProgress();

         var sendData = {
             Id: $("#user-details-id").val(),
             Login: $("#user-details-login").val(),
             Initials: $("#user-details-initials").val(),
             Email: $("#user-details-email").val(),
             EmailConfirmed: false,
             PasswordHash: "",
             Roles: $("#user-details-roles").val(),
             Valid: $("#user-details-valid").val(),
             SecurityStamp: "",
             Settings: ""
         };

        $.ajax({
            data: JSON.stringify(sendData),
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "@Url.Action("SaveUserDetails", "Home")",
            dataType: "json",
            success: function (sData) {
                if (sData.startsWith("Error:")) {
                    $("#user-details-change-pass-error").text(sData);
                } else {
                    $("#layout-modal").modal("hide");
                }
                HideProgress();
            },
            error: function (fData) {
                alert("Operation failed:\n" + fData);
                HideProgress();
            }
        });
    }
</script>